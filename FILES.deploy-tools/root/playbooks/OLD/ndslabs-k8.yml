#
# NDSLabs cluster on OpenStack - deploy ndslabs on kubernetes
#
- name: setup ansible host vars
  hosts: all
  roles:
    - ansible_host_vars_setup
    - pre-checks

# Create or reuse existing SSH key
- name: OpenStack Key
  hosts: cluster
  run_once: true
  roles: 
    - openstack-key
  
# Create or reuse existing TLS certs
- name: Generate TLS certificates
  hosts: cluster
  run_once: true
  roles: 
    - generate-tls-certs

# Create security groups for the loadbalancer
- name: OpenStack LoadBalancer Security Group
  hosts: publicip
  roles: 
    - openstack-securitygroup-open

# Grab private IPs and wait for host up
- name: NDSLabs OpenStack Cluster
  hosts: cluster
  roles: 
    - openstack-system

# Prepare CoreOS nodes to execute ansible (install pypy, etc)
- name: CoreOS Setup
  hosts: cluster
  become: true
  roles:
    - pre-ansible

# Create a base /etc/hosts file
- name: NDSLabs environment setup
  hosts: cluster
  become: true
  roles:
    - cluster-addrs-etc-hosts

# Update /etc/hosts for localhost and disable update-engine/locksmithd
- name: CoreOS NDSLabs Preferences
  hosts: coreos
  roles:
    - coreos-ndslabs-devsystem

# Provision and attach OpenStack volume to glfs nodes
- name: OpenStack GLFS provision volume and attach
  hosts: glfs:&openstack
  roles: 
    - openstack-volume-attached

# Create brick directory on glfs nodes
- name: GLFS brick dir
  hosts: glfs
  become: true
  tasks:
    - file: path=/media/brick0/brick state=directory mode=0777

# Mount OpenStack volume to CoreOS glfs nodes
- name: CoreOS Mount GLFS
  hosts: glfs:&coreos
  roles: 
    - coreos-mount
   

##########################################################################################################################
# Now to kubernetes, back again after
##########################################################################################################################
- include: /usr/local/lib/kubernetes/contrib/ansible/cluster.yml

##########################################################################################################################
# Now additional setup now that the cluster is running
##########################################################################################################################

# Fix publicip nodes
- name: LoadBalancer public interface
  hosts: publicip
  
  connection: local
  tasks:
    - os_floating_ip: server={{ ansible_host }}
    - command: nova add-secgroup {{ ansible_host}} {{ security_groups }}

# Apply Kubernetes node labels
- name: NDSLabs initial labels
  hosts: nodes
  roles:
    - ndslabs-k8-init-labels

# Deploy glfs server daemonset
- name: NDSLabs GLFS Global Cluster Filesystem Servers
  hosts: glfs
  roles:
    - k8-glfs-server-pods
    
# Deploy glfs client daemonset
- name: NDSLabs GLFS Cluster FileSystem Clients
  hosts: compute
  roles:
    - { role: k8-glfs-client-set, when: "groups['glfs']|length > 0" }
    
# Create or reuse existing TLS certs
- name: Generate TLS certificates
  hosts: cluster
  
  run_once: true
  roles: 
    - generate-tls-certs

# Import TLS certs as kubernetes secrets
- name: Create TLS secret
  hosts: masters
  run_once: true
  roles: 
    - k8-tls-secret

# Deploy Kubernetes Addons: DNS + LMA
- name: Kubernetes Cluster Addons
  hosts: masters
  roles:
    - cluster-addons
  
# Deploy NDS Labs and LoadBalancer  
- name: Start NDSLabs ApiServer and WebUI
  hosts: masters
  roles:
    - ndslabs-api-gui
    - ndslabs-loadbalancer

# Add the cluster-local registry, mapped to all hosts on localhost:5000
- name: cluster-local-docker-registry
  hosts: master1
  roles:
    - k8s-local-docker-registry
