#
# NDSLabs cluster on OpenStack - deploy ndslabs on kubernetes
#
- name: setup ansible host vars
  hosts: 127.0.0.1
  roles:
    - pre-checks
    - ansible_host_vars_setup

- name: include site vars
  hosts: 127.0.0.1
  tasks:
    - include_vars: "{{ inventory_dir }}/site_vars/{{ site }}.yml"

# Store local K8s version as a variable
- name: Set local Kubernetes version
  hosts: 127.0.0.1
  connection: local
  set_fact: k8s_version="1.5.1"
  register: newversion

# Kill running cluster if version changed
- name: Kill running cluster if version changed
  hosts: 127.0.0.1
  connection: local
  local_action: docker rm -f kubelet
  failed_when: newversion.rc < 0
  when: newversion.changed

# Start hyperkube container
- name: Start Hyperkube container
  hosts: 127.0.0.1
  connection: local
  when: newversion.changed
  register: kubeup
  local_action: (docker run --volume=/:/rootfs:ro --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:rw --volume=/var/lib/kubelet/:/var/lib/kubelet:rw,rslave --volume=/var/run:/var/run:rw --volume=/etc/kubernetes/manifests:/etc/kubernetes/manifests --net=host --pid=host --privileged=true --name=kubelet -d gcr.io/google_containers/hyperkube-amd64:v{{ k8s_version }} /hyperkube kubelet --containerized --hostname-override="127.0.0.1" --address="0.0.0.0" --api-servers=http://localhost:8080 --config=/etc/kubernetes/manifests --allow-privileged=true --v=2 || (echo '' && echo 'Starting previous Kubelet...' && docker start kubelet)) && echo 'Kubelet started successfully!' 

# Download kubectl binary
- name: Download kubectl binary
  hosts: 127.0.0.1
  connection: local
  when: newversion.changed
  local_action: curl http://storage.googleapis.com/kubernetes-release/release/v{{ k8s_version }}/bin/linux/amd64/kubectl -o /opt/bin/kubectl
  register: newbinary
  
# Set execute permission on kubectl binary
- name: Set execute permissions on kubectl
  hosts: 127.0.0.1
  connection: local
  when: newbinary.changed
  file:
    path: /opt/bin/kubectl
    state: touch
    mode: "+x"

# Wait for Kubernetes API server to respond
- name: Wait for kube-apiserver to initialize
  hosts: 127.0.0.1
  connection: local
  local_action: wait_for host={{ ansible_host }} port=8080
  when: kubeup.changed

# Apply Kubernetes node labels for NDS - 
- name: label K8s nodes
  hosts: 127.0.0.1
  connection: local
  when: kubeup.changed
  roles:
    - ndslabs-k8-init-labels

# Create or reuse existing TLS certs
- name: Generate TLS certificates
  hosts: 127.0.0.1 
  connection: local
  run_once: true
  roles: 
    - generate-tls-certs

# Import TLS certs as kubernetes secrets
- name: Create TLS secret
  hosts: 127.0.0.1
  connection: local
  when: kubeup.changed
  run_once: true
  roles: 
    - k8-tls-secret

# Deploy NDS Labs and LoadBalancer  
- name: Start NDSLabs ApiServer and WebUI
  hosts: 127.0.0.1
  connection: local
  when: kubeup.changed
  roles:
    - ndslabs-api-gui
    - ndslabs-loadbalancer
