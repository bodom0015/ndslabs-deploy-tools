
- name: Global FS ConfigFile
  template: src=globalfs-configmap.j2 dest=/tmp/glfs-config-{{ clusterfs_vol_name }}
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
  register: gfsinstalling

#- debug: msg="kubectl create {{ lookup('template', 'globalfs-configmap.j2') }}"
- name: Global FS create configmap
  shell: kubectl create configmap glfs-config-{{ clusterfs_vol_name }} --from-file=/tmp/glfs-config-global --namespace=kube-system
  when: gfsinstalling.changed
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
  
- name: Gluster Server Spec Deploy File
  template: src=gluster-server-ds.yaml.j2 dest=/tmp/gluster-server-ds.yaml
  when: gfsinstalling.changed
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
  
- name: Gluster Server Pods Deploy
  shell: "kubectl create -f  /tmp/gluster-server-ds.yaml"
  when: gfsinstalling.changed
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Gluster Server Wait DS ready
  shell: kubectl get pods -lname=glfs-server-{{ clusterfs_vol_name }} -o jsonpath='{.items[*].status.containerStatuses[*].ready}' --namespace=kube-system
  register: shellout
  until: shellout.stdout.find("false") == -1
  retries: 50
  delay: 10
  when: gfsinstalling.changed
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Gluster Pod Name for peer probe
  shell: kubectl get pods -lname=glfs-server-{{ clusterfs_vol_name }} -o jsonpath='{.items[0].metadata.name}' --namespace=kube-system 
  register: shellout
  when: gfsinstalling.changed
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
- name: Set glpod
  set_fact:
    glpod: "{{ shellout['stdout'] }}"
  when: gfsinstalling.changed

- name: Gluster Init Peer Probe
  shell: kubectl exec -t {{ glpod }} gluster peer probe {{ ansible_ssh_host }} --namespace=kube-system
  delegate_to: "{{ groups['masters'][0] }}"
  register: shellout
  until: shellout.stdout.find("uccess") != -1
  retries: 50
  delay: 10
  when: gfsinstalling.changed

- name: Gluster wait for peering completion
  shell: kubectl exec -t {{ glpod }} gluster pool list --namespace=kube-system | tail -n+2 | wc -l
  delegate_to: "{{ groups['masters'][0] }}"
  register: shellout
  until: shellout.stdout.find("4") != -1
  retries: 50
  delay: 10
  when: gfsinstalling.changed

- name: Gluster Full Cluster FS Volume 2x2 strip/mirror
  shell: "kubectl exec -t {{ glpod }} gluster volume create {{ clusterfs_vol_name }} stripe 2 replica 2 transport tcp  {{ hostvars[groups['glfs'][0]]['ansible_ssh_host'] }}:{{ brick_mount_path }}/brick {{ hostvars[groups['glfs'][1]]['ansible_ssh_host'] }}:{{ brick_mount_path }}/brick {{ hostvars[groups['glfs'][2]]['ansible_ssh_host'] }}:{{ brick_mount_path }}/brick {{ hostvars[groups['glfs'][3]]['ansible_ssh_host'] }}:{{ brick_mount_path }}/brick --namespace=kube-system"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: fcreated
  when: gfsinstalling.changed

- name: Gluster Volume NFS off
  shell: "kubectl exec -t {{ glpod }} gluster volume set {{ clusterfs_vol_name }} nfs.disable on --namespace=kube-system"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  when: fcreated.changed

- name: Gluster Start volume
  shell: "kubectl exec -t {{ glpod }} gluster volume start {{ clusterfs_vol_name }} --namespace=kube-system"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true                                                                                                                            
  when: fcreated.changed

- name: Gluster Global volume check                                                                                                         
  command: "kubectl exec -t {{ glpod }} gluster volume status {{ clusterfs_vol_name }} --namespace=kube-system"                                                    
  delegate_to: "{{ groups['masters'][0] }}"                                                                                                 
  run_once: true                                                                                                                            
  when: fcreated.changed

- name: Gluster enable quota
  command: "kubectl exec -t {{ glpod }} gluster volume quota {{ clusterfs_vol_name }} enable --namespace=kube-system"
  when: gfsinstalling.changed
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
